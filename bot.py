from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, CallbackQueryHandler, ContextTypes, filters

# =========================
# CONFIGURA√á√ïES DO BOT
# =========================
TOKEN = "8200201915:AAHxipR8nov2PSAJ3oJLIZDqplOnxhHYRUc"
GROUP_ID = "-5014344988"  # ID do grupo SafeJob

# Idiomas dispon√≠veis
LANGUAGES = {
    "en": "üá¨üáß English",
    "pt": "üáßüá∑ Portugu√™s",
    "es": "üá™üá∏ Espa√±ol",
    "ru": "üá∑üá∫ –†—É—Å—Å–∫–∏–π"
}

# Mensagem de seguran√ßa multil√≠ngue
SECURITY_MSG = {
    "en": "üîí Welcome to SafeJob!\nEvery job opportunity shared here is carefully reviewed by our team.\nPlease fill your information carefully so our support team can find the best position for you.",
    "pt": "üîí Bem-vindo ao SafeJob!\nTodas as vagas publicadas aqui s√£o cuidadosamente analisadas pela nossa equipe.\nPor favor, preencha suas informa√ß√µes com cuidado para que a equipe encontre a melhor vaga para voc√™.",
    "es": "üîí ¬°Bienvenido a SafeJob!\nTodas las ofertas publicadas aqu√≠ son revisadas cuidadosamente por nuestro equipo.\nPor favor, completa tu informaci√≥n con cuidado para que el equipo encuentre la mejor vacante para ti.",
    "ru": "üîí –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ SafeJob!\n–í—Å–µ –≤–∞–∫–∞–Ω—Å–∏–∏ —Ç—â–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—è—é—Ç—Å—è –Ω–∞—à–µ–π –∫–æ–º–∞–Ω–¥–æ–π.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω—è–π—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ, —á—Ç–æ–±—ã –∫–æ–º–∞–Ω–¥–∞ –º–æ–≥–ª–∞ –ø–æ–¥–æ–±—Ä–∞—Ç—å –ª—É—á—à—É—é —Ä–∞–±–æ—Ç—É –¥–ª—è –≤–∞—Å."
}

# Mensagem final
FINAL_MSG = {
    "en": "‚úÖ Thank you! Your information has been sent successfully. Our team will review your profile and contact you soon.",
    "pt": "‚úÖ Obrigado! Suas informa√ß√µes foram enviadas com sucesso. Nossa equipe vai analisar seu perfil e entrar em contato em breve.",
    "es": "‚úÖ ¬°Gracias! Tu informaci√≥n ha sido enviada con √©xito. Nuestro equipo revisar√° tu perfil y se pondr√° en contacto contigo pronto.",
    "ru": "‚úÖ –°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞. –ù–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è."
}

# Perguntas multil√≠ngues com emojis
QUESTIONS = {
    "en": [
        "üë§ What's your full name?",
        "üéÇ How old are you?",
        "üè≥Ô∏è What's your nationality?",
        "üíº Tell us about your professional experiences.",
        "üåê What languages do you speak?",
        "üìç Where are you currently located?",
        "‚ö†Ô∏è Do you have any fines to pay? (Yes/No)",
        "üõÇ Do you have a valid work visa? (Yes/No)",
        "üöö Are you available to relocate? (Yes/No)",
        "üì∏ Are you a model and want to provide photos? (Yes/No) ‚Äì optional",
        "üé• Send a short presentation video (up to 1 min)",
        "üì± What's your Telegram contact? (Add @username or phone number)",
        "üìù Any additional notes?"
    ],
    "pt": [
        "üë§ Qual √© o seu nome completo?",
        "üéÇ Quantos anos voc√™ tem?",
        "üè≥Ô∏è Qual √© a sua nacionalidade?",
        "üíº Fale sobre suas experi√™ncias profissionais.",
        "üåê Quais idiomas voc√™ fala?",
        "üìç Onde voc√™ est√° localizado atualmente?",
        "‚ö†Ô∏è Voc√™ possui multas para pagar? (Sim/N√£o)",
        "üõÇ Possui visto de trabalho v√°lido? (Sim/N√£o)",
        "üöö Est√° dispon√≠vel para mudar de cidade? (Sim/N√£o)",
        "üì∏ Voc√™ √© modelo e deseja enviar fotos? (Sim/N√£o) ‚Äì opcional",
        "üé• Envie um v√≠deo de apresenta√ß√£o (at√© 1 minuto)",
        "üì± Qual √© o seu Telegram para contato? (adicione o n√∫mero ou @)",
        "üìù Alguma observa√ß√£o adicional?"
    ],
    "es": [
        "üë§ ¬øCu√°l es tu nombre completo?",
        "üéÇ ¬øCu√°ntos a√±os tienes?",
        "üè≥Ô∏è ¬øCu√°l es tu nacionalidad?",
        "üíº Cu√©ntanos sobre tus experiencias profesionales.",
        "üåê ¬øQu√© idiomas hablas?",
        "üìç ¬øD√≥nde te encuentras actualmente?",
        "‚ö†Ô∏è ¬øTienes multas pendientes? (S√≠/No)",
        "üõÇ ¬øTienes visa de trabajo v√°lida? (S√≠/No)",
        "üöö ¬øEst√°s disponible para mudarte? (S√≠/No)",
        "üì∏ ¬øEres modelo y deseas enviar fotos? (S√≠/No) ‚Äì opcional",
        "üé• Env√≠a un video de presentaci√≥n (hasta 1 minuto)",
        "üì± ¬øCu√°l es tu Telegram de contacto? (agrega el n√∫mero o @)",
        "üìù ¬øAlguna observaci√≥n adicional?"
    ],
    "ru": [
        "üë§ –ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?",
        "üéÇ –°–∫–æ–ª—å–∫–æ –≤–∞–º –ª–µ—Ç?",
        "üè≥Ô∏è –ö–∞–∫–∞—è —É –≤–∞—Å –Ω–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å?",
        "üíº –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ –≤–∞—à–µ–º –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–º –æ–ø—ã—Ç–µ.",
        "üåê –ö–∞–∫–∏–µ —è–∑—ã–∫–∏ –≤—ã –∑–Ω–∞–µ—Ç–µ?",
        "üìç –ì–¥–µ –≤—ã —Å–µ–π—á–∞—Å –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å?",
        "‚ö†Ô∏è –ï—Å—Ç—å –ª–∏ —É –≤–∞—Å —à—Ç—Ä–∞—Ñ—ã? (–î–∞/–ù–µ—Ç)",
        "üõÇ –ï—Å—Ç—å –ª–∏ —É –≤–∞—Å —Ä–∞–±–æ—á–∞—è –≤–∏–∑–∞? (–î–∞/–ù–µ—Ç)",
        "üöö –ì–æ—Ç–æ–≤—ã –ª–∏ –≤—ã –ø–µ—Ä–µ–µ—Ö–∞—Ç—å? (–î–∞/–ù–µ—Ç)",
        "üì∏ –í—ã –º–æ–¥–µ–ª—å –∏ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ? (–î–∞/–ù–µ—Ç) ‚Äì –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ",
        "üé• –û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–æ–Ω–Ω–æ–µ –≤–∏–¥–µ–æ (–¥–æ 1 –º–∏–Ω)",
        "üì± –í–∞—à Telegram –¥–ª—è —Å–≤—è–∑–∏? (—É–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –∏–ª–∏ @)",
        "üìù –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∑–∞–º–µ—Ç–∫–∏?"
    ]
}

# Campos para formata√ß√£o final no grupo
FIELDS = {
    "pt": [
        ("üë§ Nome",),
        ("üéÇ Idade",),
        ("üè≥Ô∏è Nacionalidade",),
        ("üíº Experi√™ncia",),
        ("üåê Idiomas",),
        ("üìç Localiza√ß√£o",),
        ("‚ö†Ô∏è Multas",),
        ("üõÇ Visto de trabalho v√°lido",),
        ("üöö Dispon√≠vel para mudar de cidade",),
        ("üì∏ Modelo (enviou fotos?)",),
        ("üé• V√≠deo de apresenta√ß√£o",),
        ("üì± Telegram",),
        ("üìù Observa√ß√µes",)
    ],
    "en": [
        ("üë§ Name",),
        ("üéÇ Age",),
        ("üè≥Ô∏è Nationality",),
        ("üíº Experience",),
        ("üåê Languages",),
        ("üìç Location",),
        ("‚ö†Ô∏è Fines",),
        ("üõÇ Valid work visa",),
        ("üöö Available to relocate",),
        ("üì∏ Model (sent photos?)",),
        ("üé• Presentation video",),
        ("üì± Telegram",),
        ("üìù Notes",)
    ],
    "es": [
        ("üë§ Nombre",),
        ("üéÇ Edad",),
        ("üè≥Ô∏è Nacionalidad",),
        ("üíº Experiencia",),
        ("üåê Idiomas",),
        ("üìç Ubicaci√≥n",),
        ("‚ö†Ô∏è Multas",),
        ("üõÇ Visa de trabajo v√°lida",),
        ("üöö Disponible para mudarse",),
        ("üì∏ Modelo (envi√≥ fotos?)",),
        ("üé• Video de presentaci√≥n",),
        ("üì± Telegram",),
        ("üìù Observaciones",)
    ],
    "ru": [
        ("üë§ –ò–º—è",),
        ("üéÇ –í–æ–∑—Ä–∞—Å—Ç",),
        ("üè≥Ô∏è –ù–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å",),
        ("üíº –û–ø—ã—Ç",),
        ("üåê –Ø–∑—ã–∫–∏",),
        ("üìç –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ",),
        ("‚ö†Ô∏è –®—Ç—Ä–∞—Ñ—ã",),
        ("üõÇ –†–∞–±–æ—á–∞—è –≤–∏–∑–∞",),
        ("üöö –ì–æ—Ç–æ–≤ –∫ –ø–µ—Ä–µ–µ–∑–¥—É",),
        ("üì∏ –ú–æ–¥–µ–ª—å (—Ñ–æ—Ç–æ?)",),
        ("üé• –í–∏–¥–µ–æ",),
        ("üì± Telegram",),
        ("üìù –ü—Ä–∏–º–µ—á–∞–Ω–∏—è",)
    ]
}

# =========================
# FUN√á√ïES DO BOT
# =========================

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [[InlineKeyboardButton(name, callback_data=code)] for code, name in LANGUAGES.items()]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("üåê Select your language / Selecione seu idioma / Seleccione su idioma / –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:", reply_markup=reply_markup)

async def language_choice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    lang = query.data
    context.user_data["lang"] = lang
    context.user_data["q_index"] = 0
    context.user_data["photos"] = []
    await query.message.reply_text(SECURITY_MSG[lang])
    await ask_next_question(update, context)

async def ask_next_question(update: Update, context: ContextTypes.DEFAULT_TYPE):
    lang = context.user_data.get("lang", "en")
    index = context.user_data.get("q_index", 0)
    questions = QUESTIONS[lang]

    if index >= len(questions):
        await send_to_group(update, context)
        await update.effective_chat.send_message(FINAL_MSG[lang])
        context.user_data.clear()
        return

    question = questions[index]
    keyboard = [[InlineKeyboardButton("üîÑ Restart / Reiniciar / –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å", callback_data="restart")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.effective_chat.send_message(question, reply_markup=reply_markup)

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if "q_index" not in context.user_data:
        return
    index = context.user_data["q_index"]
    lang = context.user_data.get("lang", "en")
    text = update.message.text

    if QUESTIONS[lang][index].startswith("üì∏"):
        if text.lower() in ["no", "n√£o", "n", "–Ω–µ—Ç", "nao"]:
            context.user_data["q_index"] += 1
            await ask_next_question(update, context)
            return
        else:
            context.user_data["expect_photos"] = True
            await update.message.reply_text("üì∏ Please send at least 4 photos / Envie pelo menos 4 fotos / Envie al menos 4 fotos / –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–∏–Ω–∏–º—É–º 4 —Ñ–æ—Ç–æ")
            return

    context.user_data[f"answer_{index}"] = text
    context.user_data["q_index"] += 1
    await ask_next_question(update, context)

async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if context.user_data.get("expect_photos"):
        context.user_data["photos"].append(update.message.photo[-1].file_id)
        if len(context.user_data["photos"]) >= 4:
            context.user_data["q_index"] += 1
            context.user_data.pop("expect_photos")
            await ask_next_question(update, context)
        else:
            await update.message.reply_text(f"üì∏ {len(context.user_data['photos'])}/4 fotos recebidas. Envie mais.")
        return

async def handle_video(update: Update, context: ContextTypes.DEFAULT_TYPE):
    index = context.user_data.get("q_index", 0)
    context.user_data[f"answer_{index}"] = update.message.video.file_id if update.message.video else update.message.document.file_id
    context.user_data["q_index"] += 1
    await ask_next_question(update, context)

async def restart(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data.clear()
    await start(update, context)

async def callback_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    if query.data == "restart":
        await restart(update, context)
    else:
        await language_choice(update, context)

async def send_to_group(update: Update, context: ContextTypes.DEFAULT_TYPE):
    answers = context.user_data
    lang = answers.get("lang", "en")
    fields = FIELDS[lang]

    message = "üì© Novo candidato via SafeJob!\n\n"

    for i, (label,) in enumerate(fields):
        key = f"answer_{i}"
        if key in answers:
            message += f"{label}: {answers[key]}\n"

    await context.bot.send_message(chat_id=GROUP_ID, text=message)

    for photo in answers.get("photos", []):
        await context.bot.send_photo(chat_id=GROUP_ID, photo=photo)

# =========================
# MAIN
# =========================
def main():
    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(callback_handler))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    app.add_handler(MessageHandler(filters.PHOTO, handle_photo))
    app.add_handler(MessageHandler(filters.VIDEO | filters.Document.MimeType("video/mp4"), handle_video))

    app.run_polling()

if __name__ == "__main__":
    main()
